ForGe installation instructions

This document covers setting up ForGe to be run using Django 
development web server. This document does not cover how to deploy
the application to Apache or any other web server. Instructions how to 
do this can be found in Django documentation. 

The application has a default installation method using install.sh.
This requires an application installation root directory and temporary
mount point. Custom installation is possible, this document explains the
modifications needed. See section 4 for custom installation.


1. Requirements
ForGe has been tested on 64 but Ubuntu 12.04 but other Linux variants
are likely to work. The following applications are needed:
- Django 1.5.1
- Python 2.7.3 - 2.7.5
- Tuxera NTFS-3G driver 2013.1.13 or newer. ForGe works with older
   NTFS-3G versions but created images behave oddly due to NTFS driver
   behaviour regarding deleted files. Deleted files lose their parent
   directory information and timestamp information as $FILE_NAME and
   $STANDARD_INFORMATION attributes are deleted. 


2. Required information
Default installation needs a mount point (default /mnt/image) 
and installation directory (default /usr/local/forge). These can be
modified in install.sh. It also requires an username of ForGe user,
to chown directories to the correct user. 


The following directories and locations are needed for advanced install:
1) Mount point for temporary use to mount unfinished images.
    Default is /mnt/image. The directory must exist.
2) Database type and location. SQLite is the easiest, the file
    can be anywhere in the file system, read and write permissions are
    needed. 
3) Ready image directory. This can be anywhere in the file system,
    read and write permissions are needed and the directory must
    exist. 
4) Repository directory. This is where trivial and secret file
    candidates are uploaded. The directory can be anywhere in the file
    system. The following three diretories must be created:
    /path/to/repository
    /path/to/repository/repository
    /path/to/repository/secrerepository
5) chelper path
    chelper is a suid root helper application to create and mount file
    systems. The source code is included in the repository and can be
    installed anywhere. 



3. Default installation
The recommended installation is done with install.sh. Edit the script to 
modify APPDIR, MOUNTDIR and USERNAME.
Run install.sh

*** INSTALL.SH MUST BE RUN AS ROOT ***
Follow instructions about setting up database and starting the web server.


**** IMPORTANT ****
Start web browser and navigate to 
http://localhost:8000/ui/init_db
if you get "ok", the application is ready to use. 
NB: Without the above step, database has no file systems or hiding methods. 
This task must be done only once to a clean database installation. 

Access the UI by either
http://localhost:8000/ui/main  (application)
http://localhost:8000/admin/ui (database administration)









4. Custom installation
*** NOT RECOMMENDED - use default installation instead***

This section explains all locations of path information. 
All files requiring modification need to be renamed manually if the custom 
path is chosen. For example, chelper/chelper.h does not exist,
chelper/chelper.h_ must be renamed to this file. 



1) Create directories
2) Edit chelper/chelper.h and define
    PATH to point to ready images (2.2)
    MOUNTPOINT to point to temporary directory (2.1)
3) Run make
4) copy chelper to target location (2.5), execute
    chown root chelper;chmod 4711 chelper to make it setuid root
5) edit forensic/forensic/settings.py
    The following parameters need changing:
    DATABASE: if sqlite is used, only NAME needs to be changed
    TIME_ZONE to correspond to local settings
    MEDIA_ROOT to include the top level repository (2.4), for example
                         /path/to/repository 
6) edit forensic/ui/uitools.py and change HELPER to point to chelper
    location (2.5)
7) edit forensic/ui/models.py and change
    PREFIX to point to ready images dir (2.3)
    MOUNTPOINT to point to temporary mount point (2.1)
8) edit creator/ntfsparser/ntfsc.py 
    change HELPER to point to chelper (2.5)
9) edit forensic/forensic/wsgi.py
    change sys.path.append to point to creator directory

This completes code modifications. 
The remaining task is to initialise and populate database. 

10) Create an empty database
    cd forensic
    python manage.py syncdb
    
    syncdb asks questions about administrator and password,
    enter anything you want
11) Start Django development web server
      python manage.py runserver

12) Use included view to populate database with initial entries
      Start web browser and navigate to 
      http://localhost:8000/ui/init_db
      if you get "ok", the application is ready to use. 

See operating instructions about usage






